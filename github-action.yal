name: CI - KONG-CYPRESS-TEST

on:
  push:
    branches:
      - main # 根据实际情况调整触发分支，也可以是'develop'等
  pull_request:

jobs:
  build - and - test:
    runs - on: ubuntu - latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        # 这一步是从GitHub仓库中检出代码，以便后续在虚拟机环境中进行构建和测试
      - name: Install Node.js
        uses: actions/setup - node@v3
        with:
          node - version: '16.x' # 根据项目需求调整Node.js版本
        # 安装指定版本的Node.js，因为Cypress依赖Node.js环境
      - name: Install dependencies
        run: npm install # 如果是yarn项目，使用yarn install
        # 安装项目的所有依赖，包括Cypress和其他相关库
      - name: Cypress cache
        uses: cypress - io/cache@v6
        with:
          path: ~/.cache/Cypress
          key: cypress - v16 - ${{ hashFiles('package - json.lock') }} # 根据项目的package - json.lock文件的哈希值缓存Cypress
          restore - keys: |
            cypress - v16 -
        # 缓存Cypress相关的文件，加快后续测试运行速度
      - name: Run Cypress tests
        uses: cypress - io/github - action@v5
        with:
          start: npx cypress run
          record: false # 根据需要设置是否记录测试到Cypress Dashboard，这里设为false
          browser: chrome # 选择测试用的浏览器，也可以是其他浏览器
        # 运行Cypress测试用例
      - name: Generate test reports
        run: |
          npm install - g mochawesome - merge mochawesome - report - generator
          mkdir - p cypress/reports
          npx mochawesome - merge cypress/reports/mochawesome - report/*.json > mochawesome.json
          npx mochawesome - report - generator mochawesome.json - o cypress/reports/html - report
        # 生成测试报告，这里使用mochawesome - merge和mochawesome - report - generator工具来合并和生成HTML格式的报告
      - name: Upload test reports
        uses: actions/upload - artifact@v3
        with:
          name: cypress - test - reports
          path: cypress/reports/html - report
        # 将生成的测试报告上传为GitHub Actions的工件，方便后续查看